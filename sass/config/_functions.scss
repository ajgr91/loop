
@mixin flexbox() {
  display: -webkit-box;  /* OLD - iOS 6-, Safari 3.1-6, BB7 */
  display: -ms-flexbox;  /* TWEENER - IE 10 */
  display: -webkit-flex; /* NEW - Safari 6.1+. iOS 7.1+, BB10 */
  display: flex;         /* NEW, Spec - Firefox, Chrome, Opera */
}

@mixin flex($args) {
  -webkit-box-flex: $args;   /* OLD - iOS 6-, Safari 3.1-6 */
  -webkit-flex: $args;       /* Safari 6.1+. iOS 7.1+, BB10 */
  -ms-flex: $args;           /* IE 10 */
  flex: $args;               /* NEW, Spec - Firefox, Chrome, Opera */
}

@mixin flex-direction($args) {
  -ms-flex-direction: $args; // IE10
  -webkit-flex-direction: $args; // Safari / iOS
  flex-direction: $args;
}

@mixin flex-align($args){
  -webkit-box-align: $args;
  -webkit-align-items: $args;
  -moz-box-align: $args;
  -ms-flex-align: $args;
  align-items: $args;
  justify-content: $args;
}

@mixin flex-order($args) {
  -ms-flex-order: $args; // IE10
  -webkit-order: $args; // Safari / iOS
  order: $args;
}

@mixin appearance($args) {
  webkit-appearance: $args;
    moz-appearance: $args;
    ms-appearance: $args;
}

// Helper mixin to build arrow with css.
@mixin arrow($size, $direction, $color) {
  display: inline-block;
  width  : 0;
  height : 0;
  
  @if $direction == "up" or $direction == "down" {
    border-right: #{$size}px solid transparent;
    border-left : #{$size}px solid transparent;
    
    @if $direction == "up" {
      border-bottom: #{$size}px solid $color;
    } @else {
      border-top: #{$size}px solid $color;
    }
  } @else if $direction == "left" or $direction == "right" {
    border-top   : #{$size}px solid transparent;
    border-bottom: #{$size}px solid transparent;
  
    @if $direction == "left" {
      border-right: #{$size}px solid $color;
    } @else {
      border-left: #{$size}px solid $color;
    }
  } 
}

// Px to Em
@function em( $px, $context: $base_font_size ) {
  @return #{$px/$context}em
}

// Px to Rem
@function rem( $px, $context: $base_font_size ) {
  @return #{$px/$context}rem
}

@function calculateRem($size) {
  $remSize: $size / 16px;
  @return $remSize * 1rem;
}

@mixin font($style, $weight, $size, $family ) {
  font-style: $style;
  font-weight: $weight;
  font-family: $family;
  font-size: ($size)+px;
  font-size: rem($size);
}

@mixin opacity($alpha) {
  opacity: $alpha;
  -ms-filter: "progid:DXImageTransform.Microsoft.Alpha(Opacity=#{$alpha*100})";
}

@mixin bdrs( $radius ) {
  -webkit-border-radius: $radius;
     -moz-border-radius: $radius;
      -ms-border-radius: $radius;
          border-radius: $radius;
}

@mixin trs( $args ) {
  -webkit-transition: $args;
  -moz-transition: $args;
  -o-transition: $args;
  transition: $args;
}
 
@mixin trf( $args ) {
  -webkit-transform: $args;
  -moz-transform: $args; 
  -o-transform: $args; 
  transform: $args;
}

@mixin bxsz($arg) {
  -webkit-box-sizing: $arg;
  -moz-box-sizing: $arg;
  -o-box-sizing: $arg;
  box-sizing: $arg;
}

// Mixin that returns rgba colors and
// the propietary syntax for IE8
@mixin back_rgba_color($color, $alpha) {
  $rgba: rgba($color, $alpha);
  $ie-hex-str: ie-hex-str($rgba);
  background-color: transparent;
  background-color: $rgba;
  -ms-filter:"progid:DXImageTransform.Microsoft.gradient(startColorstr=#{$ie-hex-str},endColorstr=#{$ie-hex-str})";
  zoom: 1;
}

@mixin prefix($prop, $vals) {
  -webkit-#{$prop}: $vals;
  -moz-#{$prop}: $vals;
  -o-#{$prop}: $vals;
  #{$prop}: $vals;
}

@mixin arrow_box($width, $height, $position, $size, $border, $color, $bcolor) {
  width: $width;
  height: $height;
  position: relative;
  background: $color;
  border: #{$border}px solid $bcolor;
  &:after, &:before {
    @if $position == "top" { bottom: 100%; left: 50%; }
    @else if $position == "right" { left: 100%; top: 50%; }
    @else if $position == "left" { right: 100%; top: 50%; }
    @else if $position == "bottom" { top: 100%; left: 50%; }
    border: solid transparent;
    content: " ";
    height: 0;
    width: 0;
    position: absolute;
    pointer-events: none;
  }
  &:after {
    border-color: rgba(106, 60, 213, 0);
    border-width: #{$size}px;
    @if $position == "top" { border-bottom-color: $color; margin-left: -#{$size}px; }
    @else if $position == "right" { border-left-color: $color; margin-top: -#{$size}px; }
    @else if $position == "left" { border-right-color: $color; margin-top: -#{$size}px; }
    @else if $position == "bottom" { border-top-color: $color; margin-left: -#{$size}px; }
  }
  &:before {
    border-color: rgba(194, 225, 245, 0);
    $size6: $size + round($border*1.5);
    border-width: #{$size6}px;
    @if $position == "top" { border-bottom-color: $bcolor; margin-left: -#{$size6}px; }
    @else if $position == "right" { border-left-color: $bcolor; margin-top: -#{$size6}px; }
    @else if $position == "left" { border-right-color: $bcolor; margin-top: -#{$size6}px; }
    @else if $position == "bottom" { border-top-color: $bcolor; margin-left: -#{$size6}px; }
  }
}

/* Icono del menu del movil */
@mixin burguer($ancho, $alto, $separacion, $color) {
  position: relative;
  z-index: 500;
  width: #{$ancho}px;
  height: #{round($alto*3 + $separacion*2)}px;
  /*display: inline-block;*/
  vertical-align: top;
  left: 0;
  right: 0;
  bottom: 0;
  top: 14px;
  margin: auto;

  .icon-top-line, .icon-middle-line, .put-in-middle, .icon-bottom-line {
    position: absolute;
    left: 0;
    display: block;
    width: 100%;
    height: #{$alto}px;
    background-color: $color;
    @include trs( all 0.5s ease );
  }

  .icon-top-line { top: 0; }
  .icon-middle-line, .put-in-middle { top: #{$alto+$separacion}px; }
  .icon-bottom-line { bottom: 0; }
  .rotate-45deg { @include trf( rotate(45deg) ); }
  .rotate-45deg-reverse { @include trf( rotate(-45deg) ); }
}

@mixin container_max($max_width) {
  width: 100%;
  max-width: $max_width;
  margin: 0 auto;
}

@mixin vertical-gradient($color_begin,$color_end) {
  background: $color_begin; /* Old browsers */
  background: -moz-linear-gradient(top,  $color_begin 1%, $color_end 100%); /* FF3.6+ */
  background: -webkit-gradient(linear, left top, left bottom, color-stop(1%,$color_begin), color-stop(100%,$color_end)); /* Chrome,Safari4+ */
  background: -webkit-linear-gradient(top,  $color_begin 1%,$color_end 100%); /* Chrome10+,Safari5.1+ */
  background: -o-linear-gradient(top,  $color_begin 1%,$color_end 100%); /* Opera 11.10+ */
  background: -ms-linear-gradient(top,  $color_begin 1%,$color_end 100%); /* IE10+ */
  background: linear-gradient(to bottom,  $color_begin 1%,$color_end 100%); /* W3C */
  filter: progid:DXImageTransform.Microsoft.gradient( startColorstr='$color_begin', endColorstr='$color_end',GradientType=0 ); /* IE6-9 */
}


@import 'loading_animations';